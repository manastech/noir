{
  "name": "Counter",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "headstart",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 120
          },
          "visibility": "private"
        },
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_counter",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "increment",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJzt3d+O5bhxwOF3metFcOo/ta8S5MJIHMCA4QSx74x998jAnp4xJI92QU7rJ4lXtgH1OcWiu1jk9Cf+/cuf/+c///C3P/3PX/765ee/f3n92/Ll53//+5e//u8f/vKP//3Xv/3h//725efXT1/++Jf/Wv/zl5++/Pef/vzHLz/LLz9tnlKXtF+fXP971cfT/tp5fH3g/fDr6web//IfP61xyIsSiFACUUogRgnEKYEEJZCkBFKUQBolEEplVUplVUplVUplVUplVUplVUplVUplVUplVUplVUplNUplNUplNUplNUplNUplNUplNUplNUplNUplNUpldUpldUpldUpldUpldUpldUpldUpldUpldUpldUplDUplDUplDUplDUplDUplDUplDUplDUplDUplDUplTUplTUplTUplTUplTUplTUplTUplTUplTUplTUplLUplLUplLUplLUplLUplLUplLUplLUplLUplLUplbZTK2iiVtVEqa6NU1kaprI1SWRulsjZKZW2UytoolXWhVNaFUlkXSmVdKJV1oVTWhVJZF0plXSiVdaFU1oVSWeVFKa3yotRWeVGKq7wo1VVelPIqL0p9lRelwMqLUmHlRSmx8sLUWBDHwtRYDsjiiCwOyeKYLA7K4qgsDsvCuCzBwCzByCzB0CzB2CzB4CzB6CzB8CzB+CzBAC3BCC3BEC3BGC3BIC3BKC3BMC3BOC3BQC3BSC3BUC3BWC3BYC3BaC3BcC3BeC3BgC3BiC3BkC3BmC3BoC3BqC3BsC3BuC3BwC3ByC3B0C3B2C3B4C3B6C3B8C3B+C3BAC7BCC7BEC7BGC7BIC7BKC7BMC7BOC7BQC7BSC7BUC7BWC7BYC7BaC7BcC7BeC7BgC7BiC7BkC7BmC7BoC7BqC7BsC7BuC7BwC7ByC7B0C7B2C7B4C7B6C7B8C7B+C7BAC/BCC/BEC/BGC/BIC/BKC/BMC/BOC/FOC/FOC/FOC/FOC99UWqsYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYpyXYZyXYZyXYZyXYZyXvSg11jDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzDOyzHOyzHOyzHOyzHOy1+UGusY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5+UY5xUY5xUY5xUY5xUY5xUvSo0NjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMKjPMK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yYRjyYRjyYRjyeSFqbbCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTCsWTKsWTKsWTKsWTKsWT6wlRb5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy5Vgy41gy41gy41gy41gye2GqrXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXEsmXMsmXMsmXMsmXMsmb8w1dY5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5lsw5liw4liw4liw4liw4lixemGobHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEsWHEuWHEuWHEuWHEuWHEuWL0y1TY4lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44lS44l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2Xm5zM7LZXZeLrPzcpmdl8vsvFxm5+UyOy+X2Xm5zM7LZXZeLrPzcpmdl8vsvFxm5+UyOy+X2Xm5zM7LZXZeLrPzcpmdl8vsvFxm5+UyOy+X2Xm5zM7LZXZeLrPzcpmdl8vsvFxm5+UyOy+X2Xm5zM7LZXZeLrPzcpmdl8vsvFxm5+UyOy+X2Xm5zM7LZXZeLrPzcpmdl8vsvFxm5+UyOy+X2Xm5zM7LZXZeLrPzcpmdl8vsvFxm5+UyOy+X2Xm5zM7LZXZeLrPzcpmdl8vsvFxm5+UyOy+X2Xm5zM7LZXZeLrPzcpmdl8vsvFxm5+UyOy+X2Xm5zM7LZXZeLrPzcpmdl8vsvFxm5+UyO6+Q2XmFzM4rZHZeIbPzii+VMzZkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeYXMzitkdl4hs/MKmZ1XyOy8QmbnFTI7r5DZeaXMzitldl4ps/NKmZ1XfqmcsSmz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOK2V2Ximz80qZnVfK7LxSZueVMjuvlNl5pczOa8jsvIbMzmvI7LyGzM5rfKmcsUNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWR2XkNm5zVkdl5DZuc1ZHZeQ2bnNWV2XlNm5zVldl5TZuc1v1TO2Cmz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzmjI7rymz85oyO68ps/OaMjuvKbPzWjI7ryWz81oyO68ls/NaXypn7JLZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5LZmd15LZeS2ZndeS2XktmZ3Xktl5lczOq2R2XiWz8yqZnVd9qZyxJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM6rZHZeJbPzKpmdV8nsvEpm51UyO6+S2XmVzM5ry+y8tszOa8vsvLbMzmt/qZyxW2bntWV2Xltm57Vldl5bZue1ZXZeW2bntWV2Xltm57Vldl5bZue1ZXZeW2bntWV2Xltm57Vldl5bZue1ZXZeW2bntWV2Xltm57Vldl5bZue1ZXZeW2bntWV2Xltm57W/t/M6/yd/34lbfu9OvnXGfvROvnXGfvROvnXGfvROvnXGfvROvnXGfvROvnXGfvROvnXGfvJOvrfz+uidfOuM/eidyJyx39t5ffROZM7Y7+28PnonMmfs93ZeH70TmTP2ezuvT97J93ZeH70TmTP2ezuvj96JzBn7vZ3XR+9E5oz93s7ro3cic8Z+b+f10TuROWO/t/P66J3InLHf23l99E5kztjv7bw+eicyZ+z3dl4fvROZM/Z7O6+P3onMGfu9nddH70TmjP3ezuujdyJzxn5v5/XRO5E5Y7+38/roncicsd/beX30TmTO2O/tvD56JzJn7Pd2Xh+9E5kz9ns7r4/eicwZ+72d10fvROaM/d7O66N3InPGfm/n9dE7kTljv7fz+uidyJyx39t5ffROZM7Y7+28PnonMmfs93ZeH70TlTPWvr439PrsraicsudWVI7Zcysq5+y5FZWD9tyKykl7bkXlqD23onLWnltROWzPreictt+bfH32VnRO2++Nvj57Kzqn7fdmX5+9FZ3T9nvDr8/eis5p+73p12dvRee0/d7467O3onPafm/+9dlb0TltvzcA++yt6Jy235uAffZWdE7b743APnsrOqft92Zgn70VndNWZgh2bkXntJWZgp1b0TltZcZg51Z0TluZOdi5FZ3TVmYQdm5F57SVmYSdW9E5bWVGYedWdE5bmVnYuRWd01ZmGHZuRee0lZmGnVvROW1lxmHnVnROW5l52LkVndNWZiB2bkXntJWZiJ1b0TltZUZi51Z0TluZmdi5FZ3TVmYodm5F57SVmYqdW9E5bWXGYudWdE5bmbnYuRWd01ZmMHZuRee0lZmMnVvROW1lRmPnVnROW5nZ2LkVndNWZjh2bkXntJWZjp1b0TltZcZj51Z0TluZ+di5FZ3TVmZAdm5F57SVmZCdW9E5bWVGZOdWdE5bmRnZuRWd01ZmSHZuRee0lZmSnVuROW1NZ0tmOlsy09mSmc6WzL5kTlvT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS2Y6WzLT2ZKZzpbMdLZkprMlM50tmelsyUxnS+Y6WzLX2ZK5zpbMdbZk/iVz2rrOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbMtfZkrnOlsx1tmSusyVznS2Z62zJXGdL5jpbstDZkoXOlix0tmShsyWLL5nTNnS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmShc6WLHS2ZKGzJQudLVnobMlCZ0sWOluy0NmSpc6WLHW2ZKmzJUudLVl+yZy2qbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpYsdbZkqbMlS50tWepsyVJnS5Y6W7LU2ZKlzpZs6GzJhs6WbOhsyYbOlmx8yZy2Q2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dLZkQ2dLNnS2ZENnSzZ0tmRDZ0s2dbZkU2dLNnW2ZFNnSza/ZE7bqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyWbOluyqbMlmzpbsqmzJZs6W7KpsyVbOluypbMlWzpbsqWzJVtfMqft0tmSLZ0t2dLZki2dLdnS2ZItnS3Z0tmSLZ0t2dLZki2dLdnS2ZItnS3Z0tmSLZ0t2dLZki2dLdnS2ZItnS3Z0tmSLZ0t2dLZki2dLdnS2ZItnS3Z0tmSLZ0t2dLZki2dLdnS2ZItnS3Z0tmSLZ0t2dLZki2dLdnS2ZItnS3Z0tmSLZ0t2dLZki2dLdnS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yex1MnudzF4ns9fJ7HUye53MXiez18nsdTJ7ncxeJ7PXyex1MnudzF4ns9fJ7HUye53MXiez18nsdTJ7ncxeJ7PXyex1MnudzF4ns9fJ7HUye53MXiez18nsdTJ7ncxeJ7PXyex1MnudzF4ns9fJ7HUye53MXiez18nsdTJ7ncxeJ7PXyex1MnudzF4ns9fJ7HUye53MXiez18nsdTJ7ncxeJ7PXyex1MnudzF4ns9fJ7HUye53MXiez18nsdTJ7ncxeJ7PXxex1MXtdzF4Xs9fF7HUxe13MXlfPmr7mX1PxtX6Hqn6n2p//NdX++K+p9qd/TbU//Guq/dlfU+2P/ppqn89rqn08r6n26bylesy8plA3esq8plA3esi8plA3esa8plA3esS8plA3esK8plA3esC8plA3er68plA3ery8plA3erq8plA3eri8plA3era8plA3erS8plA3erK8plA3erC8plA3eq68plA3eqy8plA3eqq8plA3eqi8plA3eqa8plA3eqS8plA3eqK8plA3eqC8plA3ep68plA3epy8plA3epq8plA3epi8plA3epa8plA3epS8plA3epK8plA3epC8plA3eo68plA3eoy8plA3eoq8plA3eoi8plA3eoa8plA3eoS8plA3eoK8plA3eoC8plA3en68pkg3qsfHa4p0o3p6vKZIN6qHx2uKdKN6drymSDeq/+DzmkLdQC5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEULuWghFy3kooVctJCLFnLRQi5ayEU3ctGNXHQjF93IRTdy0Y1cdCMX3chFN3LRjVx0IxfdyEU3ctGNXHQjF93IRTdy0Y1cdCMX3chFN3LRjVx0IxfdyEU3ctGNXHQjF93IRTdy0Y1cdCMX3chFN3LRjVx0IxfdyEU3ctGNXHQjF93IRTdy0Y1cdCMX3chFN3LRjVx0IxfdyEU3ctGNXHQjF93IRTdy0Y1cdCMX3chFN3LRjVx0IxfdyEU3ctGNXHQjF93IRTdy0Y1cdCMX3chFN3LRjVx0IxfdyEU3ctGNXHQjF93IRTdy0Y1cdCMX3chFN3LRjVx0IxfdyEU3ctGNXHQjF93IRTdy0Y1cdCMX3chFN3LRjVx0IxfdyEU3ctGNXHQjF93EReOLuOhJgW6cFOjGSYFunBToxkmBbpwU6MZJgW6cFOjGSaFuEBc9KdQN4qInhbpBXPSkUDeIi54U6gZx0ZNC3SAuelKoG8RFTwp1g7joSaFuEBc9KdQN4qInhbpBXPSkUDeIi54U6gZx0ZNC3SAuelKoG8RFTwp1g7joSaFuEBc9KdQN4qInhbpBXPSkUDeIi54U6gZx0ZNC3SAuelKoG8RFTwp1g7joSaFuEBc9KdQN4qInhbpBXPSkUDeIi54U6gZx0ZNC3SAuelKoG8RFz/8OdYO46PnfoW4QFz3/O9QN4qLnf4e6QVz0/O9QN4iLnhTqBnHRk0LdIC56UqgbxEVPCnWDuOhJoW4QFz0p1A3ioieFukFc9KRQN4iLnhTqBnHRkyLdMOSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXHchFB3LRgVx0IBcdyEUHctGBXHQgFx3IRQdy0YFcdCAXHchFB3LRgVx0IBcdyEUHctGBXHQgFx3IRQdy0YFcdCAXHchFB3LRgVx0IBcdyEUHctGBXHQgFx3IRQdy0YFcdCAXHchFB3LRgVx0IBcdvTpm7L+mMr+6VPuTv6ban/w11f7kr6n2J39NtT/5a6r9yd9SvTpeU+1TeU21T+U11XejfqXOX/ddqu/GLdV345bqu3FL9d24pfpu3FJ9Ny6pXh2vqb4bt1TfjVsKdaNXx2sKdaNXx2sKdaNXx2sKdaNXx2vq1o3wv0/9y//+F4l//fWPutvf/qj9vsCtRt++wK1x377ArZzfvsCtx9++wK3y377A7en49gVuD9K3L3B75r57gR5+P3mBn36Se07+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clFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkIsaclFDLmrIRQ25qCEXNeSihlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRR25qCMXdeSijlzUkYs6clFHLurIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kIsGctFALhrIRQO5aCAXDeSigVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0kYsmctFELprIRRO5aCIXTeSiiVw0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YF+Y754c7Avz3ZODfWG+e3KwL8x3Tw72hfnuycG+MN89OdgX5rsnB/vCfPfkWF8M+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916DvGvRdg75r0HcN+q5B3zXouwZ916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5916HvOvRdh77r0Hcd+q5D33Xouw5913s3HTnqr7kxvsbvXNbvXPt7eJFrfw/3XO+mL3Lt7+FFrv09vMi1v4cXufa5fZFrn9sXufa5fZGDfend9EUO9qV30xc52JfeTV/kYF96N32Rg33p3fRFDvald9MXOdiX3k1f5GBfejd9kYN96d30RQ72pXfTFznYl95NX+RgX3o3fZGDfend9EUO9qV30xc52JfeTV/kYF96N32Rg33p3fRFDvald9MXOdiX3k1f5GBfejd9kYN96d30RQ72pXfTFznYl95NX+RgX3o3fZGDfend9EUO9qV30xc52JfeTV/kYF96N32Rg33p3fRFDvald9MXOdiX3k1f5FhfonfTFznWl+jd9EWO9SV6N32RY32J3k1f5FhfonfTFznYl95NX+RgX3o3fZGDfend9EUO9qV30xc52JfeTV/kYF96N32Rg33p3fRFDval/y72RQ72pf8u9kUO9gX6bkDfDei7AX03oO8G9N2AvhvQdwP6bkDfjQffnfnr/cP//E8Xd7m+L9fcg+/ec31f7rm+L/dc35d7ru/LPdf35Z7r+3LP9X2552BfHnz3mnvw3XsO9uXBd+852JcH373nYF8efPeeg3158N17DvblwXfvOdiXB9+952BfHnz3noN9efDdew725cF37znYlwffvedgXx58956DfXnw3XsO9uXBd+852JcH373nYF8efPeeg3158N17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3xf/8l85/4om17vpi1zfl3uu78s91/flnuv7cs/1fbnn+r7cc31f7rm+L/cc68vq3fRFjvVl9W76Isf6sno3fZFjfVm9m77Isb6s3k1f5GBfejd9kYN96d30RQ72pXfTF7mH35+P37mYTa53xTn89z+XD2/+uXz1rvgi1/8877n+53nP9T/Pe65//u65/vm75/rf3z3XP3/3XP/8XXO9K77Iwb70rvgiB/vSu+KLHOxL74ovcrAvvSu+yMG+9K74Igf70rviixzsS++KL3KwL70rzjHtd256l3voyzX30Jdr7qEvt1zvii9yD3255h76cs099OWae+jLNffQl2sO9uXBP+852JcH/7zmHvzznoN9efDPew725cE/7znYlwf/vOdgXx78856DfXnwz3sO9uXBFUfl79zu/nn+wfnO32+/cuevrC7X/1yuuQfnu+f6n8s91z9H19yDv0z7/e850/8Xz/oXcpH+l/bhi/RP2ocv0j+WH75I39UPX6Qv9kcvUg8a9eGL9I/Mhy/SP18fvkj/l9qHL/JPeOLrgds+fJF/whNfD5D34Yv8E574eiDCz17kwRM/fJF/xhP/IJX/yEV8//q3z7C/fbxR9vsS33/er5f4/tMeFr8u4dVd4vvP+vUS33/S/+4H1V/i+8/59RLff8qvl/j+M367xINwf/QS33++I/avS4z2Et9/uq+X+P7Tfb3EB57u2yU+8HTfLvH9p/t6ie8/3ddLfP/pvl7i+0/37RIP7yM+eomff7of3nJ89BIPz0V+/b7EyOYfKx5eUMy1fudWdbmHBl9zD7W85h66dss9vKC45x5acc09/KqvuYfT+Zp7OHKvuYe+XHOwLw8vKO452JeHFxTX3MMLinsO9uXhBcU9B/vy8ILinoN9eXhBcc/Bvjy8oLjnYF8eXlBc/3Xu4QXFPcdgtR5eUNxzfV/uub4v91zfl3uu78s9xyC+Hl5QXHMPLyjuOdiXhw+07znYl4cPtO852JeHD7TvOdgX+OKm4Iubgi9uCr64Kfjiph4+tL7n4O/94cNnn7//edfX//LPu//4P1I/fSP9wUs8fU79yUs8fBn5yUs8fET5yUs8fG/5yUv0Df7oJR6++v3kJR4+EP7kJR6+Rf3kJX7+6X76ov1zl9hPH79/8hI//nTvp0/qP3mJH3+699ePP9376Zv+T17i+0/35Q3N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"
    ],
    "fileMap": {
      "1": {
        "source": "contract Counter {\n  use dep::aztec::{\n      context::{PrivateContext, Context},\n      note::{\n          note_header::NoteHeader,\n          utils as note_utils,\n      },\n      state_vars::map::Map,\n  };\n  use dep::value_note::{\n    balance_utils,\n    value_note::{\n        ValueNoteMethods,\n        VALUE_NOTE_LEN,\n    },\n  };\n  use dep::easy_private_state::easy_private_state::EasyPrivateUint;\n\n  struct Storage {\n      counters: Map<EasyPrivateUint>,\n  }\n\n  impl Storage {\n      fn init(context: Context) -> pub Self {\n          Storage {\n              counters: Map::new(\n                  context,\n                  1,\n                  |context, slot| {\n                      EasyPrivateUint::new(context, slot)\n                  },\n              ),\n          }\n      }\n  }\n\n  #[aztec(private)]\n  fn constructor(headstart: u120, owner: Field) {\n    let counters = storage.counters;\n    counters.at(owner).add(headstart, owner);\n  }\n\n  #[aztec(private)]\n  fn increment(owner: Field) {\n    let counters = storage.counters;\n    counters.at(owner).add(1, owner);\n  }\n\n  unconstrained fn compute_note_hash_and_nullifier(\n    contract_address: Field,\n    nonce: Field,\n    storage_slot: Field,\n    preimage: [Field; VALUE_NOTE_LEN],\n  ) -> [Field; 4] {\n    let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n    note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, preimage)\n  }\n\n  unconstrained fn get_counter(owner: Field) -> Field {\n    let counters = storage.counters;\n    balance_utils::get_balance(counters.at(owner).set)\n  }\n}",
        "path": "/Users/martinverzilli/work/aztec-private-counter/contracts/counter/src/main.nr"
      },
      "18": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "19": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "34": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "37": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "38": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/aztec/address.nr"
      },
      "40": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/aztec/context.nr"
      },
      "41": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  pedersen_hash_with_separator(inputs, hash_index)\n}",
        "path": "/aztec/hash.nr"
      },
      "42": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/aztec/log.nr"
      },
      "47": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/aztec/note/lifecycle.nr"
      },
      "48": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/aztec/note/note_getter.nr"
      },
      "50": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/aztec/note/note_hash.nr"
      },
      "54": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/aztec/note/utils.nr"
      },
      "61": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/aztec/oracle/get_public_key.nr"
      },
      "62": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/aztec/oracle/get_secret_key.nr"
      },
      "63": {
        "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/aztec/oracle/rand.nr"
      },
      "66": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/aztec/oracle/notes.nr"
      },
      "68": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/aztec/oracle/logs.nr"
      },
      "74": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/aztec/state_vars/map.nr"
      },
      "76": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/aztec/state_vars/set.nr"
      },
      "81": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/aztec/types/vec.nr"
      },
      "87": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/aztec/utils.nr"
      },
      "88": {
        "source": "use dep::aztec::note::{\n    note_getter::view_notes,\n    note_viewer_options::NoteViewerOptions,\n};\nuse dep::aztec::state_vars::set::Set;\nuse crate::value_note::{VALUE_NOTE_LEN, ValueNote};\n\nunconstrained pub fn get_balance(set: Set<ValueNote, VALUE_NOTE_LEN>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\nunconstrained pub fn get_balance_with_offset(set: Set<ValueNote, VALUE_NOTE_LEN>, offset: u32) -> Field {\n    let mut balance = 0;\n    // docs:start:view_notes\n    let options = NoteViewerOptions::new().set_offset(offset);\n    let opt_notes = set.view_notes(options);\n    // docs:end:view_notes\n    let len = opt_notes.len();\n    for i in 0..len {\n        if opt_notes[i].is_some() {\n            balance += opt_notes[i].unwrap_unchecked().value;\n        }\n    }\n    if (opt_notes[len - 1].is_some()) {\n        balance += get_balance_with_offset(set, offset + opt_notes.len() as u32);\n    }\n\n    balance\n}",
        "path": "/value_note/balance_utils.nr"
      },
      "91": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        rand::rand,\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    hash::pedersen_hash,\n    context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    pub fn serialize(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    pub fn deserialize(preimage: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: preimage[0],\n            owner: preimage[1],\n            randomness: preimage[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    pub fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize(),0)\n    }\n\n    // docs:start:nullifier\n\n    pub fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialize(preimage)\n}\n\nfn serialize(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: ValueNote) {\n    note.broadcast(context, slot);\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/value_note/value_note.nr"
      },
      "92": {
        "source": "use dep::aztec::{\n    context::Context,\n    note::note_getter_options::NoteGetterOptions,\n    state_vars::set::Set,\n};\nuse dep::value_note::{\n    filter::filter_notes_min_sum,\n    value_note::{ValueNote, ValueNoteMethods, VALUE_NOTE_LEN},\n};\n\nstruct EasyPrivateUint {\n    context: Context,\n    set: Set<ValueNote, VALUE_NOTE_LEN>,\n    storage_slot: Field,\n}\n\nimpl EasyPrivateUint {\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        let set = Set {\n            context,\n            storage_slot,\n            note_interface: ValueNoteMethods,\n        };\n        EasyPrivateUint {\n            context,\n            set,\n            storage_slot,\n        }\n    }\n\n    // Very similar to `value_note::utils::increment`.\n    pub fn add(self, addend: u120, owner: Field) {\n        // Creates new note for the owner.\n        let mut addend_note = ValueNote::new(addend as Field, owner);\n\n        // Insert the new note to the owner's set of notes.\n        // docs:start:insert\n        self.set.insert(&mut addend_note, true);\n        // docs:end:insert\n    }\n\n    // Very similar to `value_note::utils::decrement`.\n    pub fn sub(self, subtrahend: u120, owner: Field) {\n        // docs:start:get_notes\n        let options = NoteGetterOptions::with_filter(filter_notes_min_sum, subtrahend as Field);\n        let maybe_notes = self.set.get_notes(options);\n        // docs:end:get_notes\n\n        let mut minuend: u120 = 0;\n        for i in 0..maybe_notes.len() {\n            if maybe_notes[i].is_some() {\n                let note = maybe_notes[i].unwrap_unchecked();\n\n                // Ensure the notes are actually owned by the owner (to prevent user from generating a valid proof while\n                // spending someone else's notes).\n                assert(note.owner == owner);\n\n                // Removes the note from the owner's set of notes.\n                // docs:start:remove\n                self.set.remove(note);\n                // docs:end:remove\n\n                minuend += note.value as u120;\n            }\n        }\n\n        assert(minuend >= subtrahend);\n\n        // Creates change note for the owner.\n        let result_value = minuend - subtrahend;\n        let mut result_note = ValueNote::new(result_value as Field, owner);\n        self.set.insert(&mut result_note, result_value != 0);\n    }\n}\n",
        "path": "/easy_private_state/easy_private_state.nr"
      }
    }
  },
  "aztecNrVersion": "aztec-packages-v0.13.1"
}